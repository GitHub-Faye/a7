"""
Django settings for a7 project.

Generated by 'django-admin startproject' using Django 4.2.21.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-+2*)0s+_b-$d*e)!+q0rozaaybq8nhbx!vmcg!#f^&el_g&ebu'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 添加允许的主机
ALLOWED_HOSTS = ['DariaJane.pythonanywhere.com','127.0.0.1','localhost']



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # 第三方应用
    'rest_framework',
    'corsheaders',
    'drf_yasg',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    
    # 本地应用
    'apps.core',
    'users',
    'courses',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS中间件，必须放在CommonMiddleware之前
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # 自定义中间件
    'apps.core.middleware.RequestLoggingMiddleware',  # 请求日志记录中间件
    'users.middleware.JWTAuthMiddleware',  # JWT认证中间件
    'apps.core.middleware.RequestProcessorMiddleware',  # 请求处理中间件
    # 'users.middleware.RoleBasedPermissionMiddleware',  # 基于角色的权限中间件 - 计划将来实现
]

ROOT_URLCONF = 'a7.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'a7.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_ROOT = '/home/DariaJane/A7/static'
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 自定义用户模型
AUTH_USER_MODEL = 'users.User'

# REST Framework 配置
REST_FRAMEWORK = {
    # 认证类配置
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT令牌认证
        'rest_framework.authentication.SessionAuthentication',  # 会话认证（支持浏览器可视化API）
    ),
    
    # 权限类配置
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',  # 默认要求身份验证
    ),
    
    # 分页配置
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # 使用页码分页
    'PAGE_SIZE': 20,  # 默认每页20条数据
    
    # 渲染器配置 - 定义API输出格式
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',  # JSON渲染器
        'rest_framework.renderers.BrowsableAPIRenderer',  # 可视化API渲染器
    ],
    
    # 解析器配置 - 定义API输入解析方式
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',  # JSON解析器
        'rest_framework.parsers.FormParser',  # 表单数据解析器
        'rest_framework.parsers.MultiPartParser',  # 多部分表单数据解析器，支持文件上传
    ],
    
    # 异常处理配置
    'EXCEPTION_HANDLER': 'rest_framework.views.exception_handler',  # 默认异常处理器
    
    # 过滤配置
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.SearchFilter',  # 搜索过滤
        'rest_framework.filters.OrderingFilter',  # 排序过滤
    ],
    
    # 版本控制配置
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',  # 使用URL命名空间进行版本控制
    
    # JSON格式配置
    'COMPACT_JSON': True,  # 压缩JSON以减少响应大小
    
    # 时间格式配置
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',  # 日期时间格式
    'DATE_FORMAT': '%Y-%m-%d',  # 日期格式
    
    # 测试配置
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',  # 测试客户端默认使用JSON格式
}

# JWT 配置
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# CORS 配置
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",

    "null",
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Swagger/OpenAPI 配置
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    },
    'USE_SESSION_AUTH': False,
    'JSON_EDITOR': True,
    'VALIDATOR_URL': None,
}

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': str(BASE_DIR.parent / 'permission.log'),
            'formatter': 'verbose',
        },
        'jwt_auth_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': str(BASE_DIR.parent / 'jwt_auth.log'),
            'formatter': 'verbose',
        },
        'request_log_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': str(BASE_DIR.parent / 'request.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'permission_log': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'jwt_auth': {
            'handlers': ['jwt_auth_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'request_log': {
            'handlers': ['request_log_file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'request_processor': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# 中间件配置项
# JWT认证中间件配置
CUSTOM_JWT_ERROR_RESPONSE = True  # 是否使用自定义JWT错误响应

# 请求日志中间件配置
REQUEST_LOG_LEVEL = 'INFO'  # 日志级别：DEBUG, INFO, WARNING, ERROR
LOG_REQUEST_BODY = False  # 是否记录请求体（默认不记录，避免记录敏感信息）
MAX_BODY_LOG_LENGTH = 1000  # 请求体最大记录长度
REQUEST_LOG_EXCLUDE_PATHS = [
    '/admin/jsi18n/',
    '/static/',
    '/media/',
    '/health-check/',
]  # 不记录日志的URL路径

# 请求处理中间件配置
MAX_REQUEST_SIZE = 10 * 1024 * 1024  # 最大请求大小（10MB）
STANDARDIZE_API_RESPONSE = True  # 是否标准化API响应
API_EXTRA_HEADERS = {
    'X-API-Version': '1.0',
    'X-Content-Type-Options': 'nosniff',
}  # 额外响应头
PROCESSOR_EXCLUDE_PATHS = [
    '/admin/',
    '/static/',
    '/media/',
]  # 不进行处理的URL路径

# 角色权限中间件配置
CUSTOM_PERMISSION_DENIED_RESPONSE = True  # 是否使用自定义权限拒绝响应
